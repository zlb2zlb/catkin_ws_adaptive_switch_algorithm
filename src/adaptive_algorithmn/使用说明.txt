一.建环境以及地图---->gazebo_world.py
  1.需要修改的参数
    model_radius:圆柱体的半径
    cylinder_number:圆柱体的数量
    save_dir:保存的路径,尽量不要改
    world_number:建图个数
  2.进行的操作
    建好对应的路径运行此代码

需要opencv-python/numpy等第三方包


二.跑路径规划算法---->test_auto_plan_evaluation.py
环境要求: ubuntu16.04 安装ros-kinect 安装turtlebot3 , 安装 scikit，并且 numpy>=1.8.2
  1.需要修改的参数
    1.1
			turtlebot3_world_launch
			turtlebot3_navigation_launch
			两个launch文件的启动地址需要修改，launch文件放在包内launch文件夹内
    1.2
			world_number_start
    	world_number_end
    	以上两个参数在程序出错需要重启时有效,修改参数使之延续下去.
    1.3
    	cylinder_number:如果不是10个障碍物,就要改变一下,以数组形式出现是因为可以连续不同障碍物数量的环境开始跑,比如[10,12],则会在跑完 10 的之后跑 12 的.
    1.4
    	file_name:保存评价函数结果的文件
    1.5
    	save_dir:两个launch文件中的WORLD_DIR/MAP_FILE,修改以下代码,设置环境变量, save_dir 为自己要跑的图所在的路径
            os.environ['MAP_FILE'] = save_dir + str(j) + '_' + str(i) + '.yaml'
            os.environ['WORLD_DIR'] = save_dir + str(j) + '_' + str(i) + '.world'
	    			os.environ['TURTLEBOT3_MODEL'] = 'burger'
	
    

  2.进行的操作
    2.1 
			安装scikit，安装包在“自动建图”文件夹内
	  		pip install scikit_learn-0.19.2-cp27-cp27mu-manylinux1_x86_64.whl
    2.2	
			启动roscore
				roscore
			启动tl1.py,以提供评价函数pv
      	  python src/adaptive_algorithmn/scripts/tl1.py
    	启动test_kkk.py,以提供威胁程度计算
      	  python src/adaptive_algorithmn/scripts/test_kkk.py
    	启动count_obstacles.py,以提供障碍物信息计算
      	  python src/adaptive_algorithmn/scripts/count_obstacles.py
    	启动test_auto_plan_evaluation.py,以开启gazebo rviz开始跑程序
      	  python src/adaptive_algorithmn/scripts/test_auto_plan_evaluation.py

当rviz或者gazebo出现异常时,需要将启动auto_plan_evaluation.py的终端关闭,并查看file_name中的记录确定自己已经跑到哪一个文件了将其设为world_number_start
